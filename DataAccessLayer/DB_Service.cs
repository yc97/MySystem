///////////////////////////////////////////////////////////
//  DB_Service.cs
//  Implementation of the Class DB_Service
//  Generated by Enterprise Architect
//  Created on:      21-四月-2016 11:19:22
//  Original author: lyc
///////////////////////////////////////////////////////////


using System.Data;
using System.Data.SQLite;
using System.Configuration;
using ModelLayer;
using System.Collections.Generic;

namespace DataAccessLayer {

	public class DB_Service {

        private SQLiteConnection conn = null;
        private SQLiteHelper SQLH = null;

        public DB_Service()
        {
            //在构造函数中连接数据库
            conn = new SQLiteConnection(getConnectionString());

            SQLiteCommand cmd = new SQLiteCommand();
            cmd.Connection = conn;
            conn.Open();

            SQLH = new SQLiteHelper(cmd);
            // you can do something... 
		}

        public DB_Service(string connectStr)
        {
            //在构造函数中连接数据库
            conn = new SQLiteConnection(connectStr);

            SQLiteCommand cmd = new SQLiteCommand();
            cmd.Connection = conn;
            conn.Open();

            SQLH = new SQLiteHelper(cmd);
            // you can do something... 
        }

        private string getConnectionString()
        {
            ////(AppSettings节点下的"SQLiteConnectionString")  
            string connectionString = ConfigurationManager.AppSettings["SQLiteConnectionString"];
            string str2 = ConfigurationManager.AppSettings["IsEncrypt"];
            if (str2 == "true")
            {
                string key = "";
                connectionString = DESEncrypt.Decrypt(connectionString, key);
            }
            //System.Console.WriteLine(connectionString);
            return connectionString;
        }

		~DB_Service(){
            
		}

		public void Dispose(){

		}

        public void Close()
        {
            conn.Close();
        }

        /// 
        /// <param name="userName"></param>
        public bool Login(string userName, string password_MD5)
        {
            bool issucceed = false;
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@userName", userName),
                new SQLiteParameter("@password_MD5", password_MD5)
            };
            DataTable dt = SQLH.Select("select * from Users where userName = @userName and passWord = @password_MD5;",p);
            if (dt.Rows.Count == 1)
            {
                issucceed = true;
            }
            return issucceed;
        }

        /// 
        /// <param name="userName"></param>
        public DataTable getSystems(string userName)
        {
            System.Console.WriteLine(userName);
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@userName", userName),
            };
            DataTable dt = null;
            string sql = "select s.mySystemsID,s.sysName from MySystems AS s, Users AS u where u.usersID=s.usersID AND u.userName=@userName";
            dt = SQLH.Select(sql, p);
            return dt;
        }

        public DataTable getAllNodes(int mySystemsID)
        {
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@mySystemsID", mySystemsID),
            };
            DataTable dt = null;
            string sql = "select nodeID,nodeName,parentID from Nodes where mySystemsID = @mySystemsID;";
            dt = SQLH.Select(sql, p);
            return dt;
        }

        public DataTable getNodeInfo(int nodeID) 
        {
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@nodeID", nodeID),
            };
            DataTable dt = null;
            string sql = "select signalType,device,chNO from Nodes where nodeID = @nodeID and device is not null and device!='';";
            dt = SQLH.Select(sql, p);
            return dt;
        }

        public void saveNodeInfo(int nodeID, string device, string signalType, int chNO)
        {
            var dicData = new Dictionary<string, object>();
            dicData["signalType"] = signalType;
            dicData["device"] = device;
            dicData["chNO"] = chNO;

            var dicCondition = new Dictionary<string, object>();
            dicCondition["nodeID"] = nodeID;
           
            this.SQLH.Update("Nodes", dicData, dicCondition);
        }

        public DataTable getMonitorData(int nodeID) 
        {
            DataTable dt = null;
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@nodeID", nodeID),
            };
            string sql = "select m.myTimeStamp, m.myValue, c.deviceID, c.sendRecv, c.externFlag," +
                " c.remoteFlag, c.dataField, c.dataLen from MonitorData as m,CanData as c" +
                " where m.nodeID=@nodeID and c.monitorDataID=m.monitorDataID order by m.myTimeStamp;";
            dt = SQLH.Select(sql, p);
            return dt;
        }

        public DataTable getUserID(string userName) 
        {
            DataTable dt = null;
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@userName", userName),
            };
            string sql = "select usersID from Users where userName=@userName";
            dt = SQLH.Select(sql, p);
            return dt;
        }
		/// 
		/// <param name="canData"></param>
        public int addCANData(CanData canData)
        {

			return 0;
		}

		/// 
		/// <param name="mySystem"></param>
        public int addSys(SystemOptions mySystem)
        {

			return 0;
		}

		/// 
		/// <param name="user"></param>
        public int addUser(Users user)
        {

			return 0;
		}

		/// 
		/// <param name="wirelessData"></param>
        public int addWirelessData(WirelessData wirelessData)
        {

			return 0;
		}

		/// 
		/// <param name="sysID"></param>
        public void deleteSys(int sysID)
        {

		}

		/// 
		/// <param name="user"></param>
        public void deleteUser(Users user)
        {

		}

		/// 
		/// <param name="nodeID"></param>
		/// <param name="systemName"></param>
		/// <param name="user"></param>
        public DataTable getCANData(int nodeID, string systemName, Users user)
        {

			return null;
		}

		/// 
		/// <param name="nodeID"></param>
		/// <param name="systemName"></param>
		/// <param name="user"></param>
        public DataTable getWirelessData(int nodeID, string systemName, Users user)
        {

			return null;
		}

		/// 
		/// <param name="mySystem"></param>
        public void updateSys(SystemOptions mySystem)
        {

		}

		/// 
		/// <param name="user"></param>
        public void updateUser(Users user)
        {

		}

        public DataTable getAllDevice() 
        {
            DataTable dt = null;
            string sql = "select deviceName from device";
            dt = SQLH.Select(sql);
            return dt;
        }

        public DataTable getUrlHistory(int userID)
        {
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@userID", userID),
            };
            DataTable dt = null;
            string sql = "select url from UrlHistory where usersID = @userID;";
            dt = SQLH.Select(sql, p);
            return dt;
        }

        public void addUrlHistory(int userID, string url)
        {
            var dic = new Dictionary<string, object>();
            dic["usersID"] = userID;
            dic["url"] = url;

            SQLH.Insert("UrlHistory", dic);
        }

        public void clearUrlHistory(int userID)
        {
            SQLiteParameter[] p = new SQLiteParameter[] { 
                new SQLiteParameter("@userID", userID),
            };
            string sql = "DELETE from UrlHistory where usersID = @userID;";
            SQLH.Execute(sql, p);
        }

	}//end DB_Service

}//end namespace DataModel//end namespace 数据模型